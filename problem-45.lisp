(in-package :project-euler)
(defun problem-45 (&optional (start-triangle 286) (start-pentagonal 165) (start-hexagonal 143))
  (let* ((objects (list (vector :tri start-triangle #'triangle-number)
			(vector :pen start-pentagonal #'pentagonal-number)
			(vector :hex start-hexagonal #'hexagonal-number))))
    (labels ((object-value (object) (funcall (elt object 2) (elt object 1)))
	     (object-index (object) (elt object 1))
	     (inc-object-index (object) (incf (elt object 1)))
	     (object-name (object) (elt object 0))
	     (format-object (object)
	       (format t "[~a: idx = ~a, value = ~a]~%"
		       (object-name object)
		       (object-index object)
		       (object-value object)))
	     (max-value-name ()
	       (let ((max-value 0)
		     (max-name))
		 (loop for object in objects do
		      (when (> (object-value object) max-value)
			(setf max-value (object-value object))
			(setf max-name (object-name object))))
		 (values max-name max-value)))
	     (increase-others (name value-to-reach)
	       (loop for object in objects do
		    (when (not (eq name (object-name object)))
		      (while (< (object-value object) value-to-reach)
			(inc-object-index object))))))
      (while (not (apply #'= (mapcar #'object-value objects)))
	(multiple-value-bind (name value) (max-value-name)
	  (increase-others name value)))
      (mapcar #'format-object objects))))
