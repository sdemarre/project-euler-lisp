(in-package :project-euler)
(defun problem-41-step (number)
  (let ((numbers (loop for i from number downto 1 collecting i))
	(max-perms (1- (fact number))))
    (loop for perm = 0 then (+ 1 perm)
	  for nth-perm = (digits-to-number (get-nth-permutation perm numbers))
	  then (digits-to-number (get-nth-permutation perm numbers))
	  until (or (prime-p nth-perm) (= max-perms perm))
	  finally (if (= max-perms perm) 
		      (return 0)
		      (return nth-perm)))))

(defun problem-41 ()
  (apply #'max (mapcar #'problem-41-step (range 2 7))))
