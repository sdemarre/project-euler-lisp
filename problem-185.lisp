(in-package :project-euler)
(defun get-data ()
  '(("5616185650518293" 2)
    ("3847439647293047" 1)
    ("5855462940810587" 3)
    ("9742855507068353" 3)
    ("4296849643607543" 3)
    ("3174248439465858" 1)
    ("4513559094146117" 2)
    ("7890971548908067" 3)
    ("8157356344118483" 1)
    ("2615250744386899" 2)
    ("8690095851526254" 3)
    ("6375711915077050" 1)
    ("6913859173121360" 1)
    ("6442889055042768" 2)
    ("2321386104303845" 0)
    ("2326509471271448" 2)
    ("5251583379644322" 2)
    ("1748270476758276" 3)
    ("4895722652190306" 1)
    ("3041631117224635" 3)
    ("1841236454324589" 3)
    ("2659862637316867" 2)))

(defun count-equal-positions (number1 number2)
  (iter (for c1 in-vector number1)
	(for c2 in-vector number2)
	(counting (char= c1 c2))))

(defun single-weight (current-guess number correct-count)
  (abs (- correct-count (count-equal-positions current-guess number))))
(defun total-weight (current-guess data)
  (let ((s (iter (for (number correct-count) in data)
		 (sum (single-weight current-guess number correct-count)))))
    (* s s)))
(defun total-weight-with-change (guess idx c data)
  (let ((original-value (aref guess idx)))
    (setf (aref guess idx) c)
    (prog1
	(total-weight guess data)
      (setf (aref guess idx) original-value))))
(defun compute-best-flip (current-guess data)
  (let ((current-weight (total-weight current-guess data))
	(new-guess (copy-seq current-guess))
	best-flip)
    (iter (for idx index-of-string new-guess)
	  (iter (for c in-string "0123456789")
		(let ((new-weight (total-weight-with-change new-guess idx c data)))
		  (when (<  new-weight current-weight)
		    (setf best-flip (cons idx c))
		    (setf current-weight new-weight)))))
    best-flip))

(defun apply-best-flip (current-guess best-flip)
  (setf (aref current-guess (car best-flip)) (cdr best-flip)))

(defun do-all-flips (current-guess data)
  (iter (initially (setq flip 0))
	(for flip next (if flip (compute-best-flip current-guess data) (terminate)))
	(when flip
	  (apply-best-flip current-guess flip)))
  current-guess)

(defun change-random (current-guess)
  (setf (aref current-guess (random 16)) (aref "0123456789" (random 10))))

(defun find-solution ()
  (let* ((guess (coerce (iter (for i from 1 to 16) (collect (aref "0123456789" (random 10)))) 'string)))
    (find-solution-with-guess guess)))

(defun find-solution-with-guess (guess)
  (let* ((data (get-data))
	 (start-weight (total-weight guess data))
	 (count-with-weight 0))
    (iter (repeat 1000000)
	  (do-all-flips guess data)
	  (let ((tw (total-weight guess data)))
	    (when (< tw start-weight)
	      (format t "~a, ~a~%" guess tw)
	      (setf count-with-weight 0)
	      (setf start-weight tw))
	    (incf count-with-weight)
	    (unless (zerop tw)
	      (change-random guess)))
	  (when (> count-with-weight 3000) (finish))
	  (when (zerop (total-weight guess data)) (finish)))))
	     
;1290560017828598
;7045065478946533
;4640570211864563
;1693565546054538
;5492571427826573
;9756271553246534