(in-package :project-euler)
(defun problem-21 (&optional (max 10000))
  (let* ((divisors (mapcar #'divisors (range 1 max)))
	 (divisor-sums (mapcar #'(lambda (x) (apply #'+ x)) divisors))
	 (sums-vector (coerce divisor-sums 'vector ))
	 (sum-of-pairs 0))
    (flet ((divisor-sum (x) (if (and (> x 0) (<= x max)) (elt sums-vector (1- x)) -1)))
      (dotimes (i max)
	(let* ((a (+ i 1))
	       (da (divisor-sum a))
	       (dda (divisor-sum da)))
	  (when (and (not (= a da)) (= a dda))
	    (incf sum-of-pairs (+ a da))))))
    (/ sum-of-pairs 2)))
